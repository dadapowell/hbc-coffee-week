{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","response","users","url","department","location","handleInputChange","bind","assertThisInitialized","reshuffle","_this2","fetch","method","then","r","json","setState","catch","err","event","target","value","name","defineProperty","employees","receivers","JSON","parse","stringify","pairedEmployees","forEach","gifter","index","pair","objectSpread","receiver","length","splice","push","pairUp","receiverIndex","Math","floor","random","alreadyPairedReceiver","find","e","guid","localStorage","setItem","map","employee","react_default","a","createElement","key","className","first","filteredEmployees","_this3","error","getItem","filter","rollCoffeeWeek","removeItem","forceUpdate","getEmployees","onChange","onClick","filterEmployees","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.88257fce.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            response: { users: [] },\n            url: 'https://hbc-frontend-challenge.hbccommon.private.hbc.com/coffee-week/users?',\n            department: null,\n            location: null\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.reshuffle = this.reshuffle.bind(this);\n    }\n\n    getEmployees(){\n        // fetch employee data from API, set state\n        let url = this.state.url;\n        if (this.state.department) {\n            url += '&department=' + this.state.department;\n        }\n        if (this.state.location) {\n            url += '&location=' + this.state.location;\n        }\n        fetch(url, {\n            method: \"GET\"\n        })\n        .then(r => r.json())\n        .then((response) => this.setState({response: response}))\n        .catch(err => this.setState({response: err}))\n    }\n\n    handleInputChange(event){\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n        // TO DO: dynamic filtering for employees by name\n    }\n\n\n\n    rollCoffeeWeek(employees){\n        // for each item in employees, assign them an employee\n        if (!employees) {\n            return \" \"\n        } else {\n            // clone the employees object\n            let receivers = JSON.parse(JSON.stringify(employees));\n            let pairedEmployees = [];\n\n            employees.forEach((gifter, index) => {\n                // associate each gifter with a receiver\n                let pair = {\n                    ...gifter,\n                    \"receiver\": null\n                }\n\n\n                // recursion test\n                if (receivers.length === 1) {\n                    pair.receiver = receivers[0];\n                    receivers.splice(0,1);\n                    pairedEmployees.push(pair);\n                    return pairedEmployees;\n\n                }\n\n                (function pairUp(){\n\n                    const receiverIndex = Math.floor(Math.random() * receivers.length);\n                    const receiver = receivers[receiverIndex];\n                    const alreadyPairedReceiver = pairedEmployees.find( e => e.guid === receiver.guid );\n\n\n                    if (receiver.guid === gifter.guid) {\n                        // don't gift yourself\n                        pairUp();\n\n                    } else if ( alreadyPairedReceiver && alreadyPairedReceiver.receiver.guid === gifter.guid ) {\n                        // don't gift your gifter\n                        pairUp();\n\n                    } else {\n                        pair.receiver = receiver;\n                        receivers.splice(receiverIndex,1);\n                        pairedEmployees.push(pair);\n                    }\n                })();\n\n            });\n\n            // persist the pairings (would be better in a database)\n            localStorage.setItem(\"paired_employees\" + this.state.location + this.state.department, JSON.stringify(pairedEmployees));\n\n            return pairedEmployees.map(\n                employee =>\n                    <div key={employee.guid} className=\"pair\">\n                        <div><strong>{employee.name.first}</strong> should buy a coffee for <strong>{employee.receiver.name.first}</strong></div>\n                    </div>\n            )\n\n        }\n\n    }\n\n    filterEmployees() {\n        let filteredEmployees;\n        const employees = this.state.response.users;\n\n        if (!this.state.location || !this.state.department) {\n            // need both in order to properly pair up\n            return [{\"error\": \"Please make both selections above\"}].map(e => <div key={e.error}>{e.error}</div>);\n        } else if (this.state.department === \"human resources\") {\n            // HR isn't participating yet, but when they do we can remove this\n            return [{\"error\": \"Sorry, human resources isn't participating ...yet!\"}].map(e => <div key={e.error}>{e.error}</div>);\n        } else if (localStorage.getItem(\"paired_employees\" + this.state.location + this.state.department)) {\n            // persist the pairings\n            // this would be better stored in a database so all employees had access to the same data\n            let existing = JSON.parse(localStorage.getItem(\"paired_employees\" + this.state.location + this.state.department));\n            return existing.map(\n                employee =>\n                    <div key={employee.guid} className=\"pair\">\n                        <div><strong>{employee.name.first}</strong> should still buy a coffee for <strong>{employee.receiver.name.first}</strong></div>\n                    </div>\n            )\n        } else {\n            filteredEmployees = employees.filter( employee => employee.location === this.state.location );\n            filteredEmployees = filteredEmployees.filter( employee => employee.department === this.state.department );\n            return this.rollCoffeeWeek(filteredEmployees);\n        }\n\n    }\n\n    reshuffle() {\n        let location = this.state.location;\n        let department = this.state.department;\n        localStorage.removeItem(\"paired_employees\" + location + department);\n        this.forceUpdate();\n    }\n\n    componentDidMount() {\n        this.getEmployees();\n    }\n\n    render() {\n        return (\n            <div className=\"coffee-week\">\n                <header>\n                    <div>\n                        <h5>Welcome to Coffee Week</h5>\n                    </div>\n\n                </header>\n                <nav>\n                    <div>\n                        <select name=\"location\" onChange={this.handleInputChange}>\n                            <option value=\"\">Location:</option>\n                            <option value=\"ny\">NY</option>\n                            <option value=\"dub\">Dublin</option>\n                        </select>\n                        <select name=\"department\" onChange={this.handleInputChange}>\n                            <option value=\"\">Department:</option>\n                            <option value=\"engineering\">Engineering</option>\n                            <option value=\"human resources\">Human Resources</option>\n                        </select>\n                        <button onClick={this.reshuffle}>Re-shuffle</button>\n                    </div>\n\n                </nav>\n                <section>\n                    {this.filterEmployees()}\n                </section>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}